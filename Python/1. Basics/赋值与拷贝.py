""" 1. 赋值
      
       · Python 中的赋值（如 a = 5），相当于给 5 这个数据对象贴上标签 a，这个过程也叫引用；
       
       · 当写 b = a 时，相当于给 5 这个数据对象又贴上标签 b；
        
       · 无论是操作 a，还是操作 b，操作的数据对象都是同一个。
"""

# 例：
a = [1, 2, 3, 4, ['a', 'b']] # 赋值
b = a # 赋值
a.append(5)       # 对 a 操作
a[4].append('c')  # 对 a 操作

print(a)  # >>> [1, 2, 3, 4, ['a', 'b', 'c'], 5]
print(b)  # >>> [1, 2, 3, 4, ['a', 'b', 'c'], 5]


"""  2. 深拷贝
      
        · 需引入模块 copy
        
        · a = 数据对象
        
        · b = copy.deepcopy(a)，相当于产生了两个独立的标签和数据对象     
"""

# 例：
import copy
a = [20, 40, 60, ['a', 'b']]
b = copy.deepcopy(a)
a.append(5)     # 对 a 操作 
b[3].append(80) # 对 b 操作
print(a)  # >>> [20, 40, 60, ['a', 'b'], 5] 
print(b)  # >>> [20, 40, 60, ['a', 'b', 80]]


""" 3. 浅拷贝 
        
        · 想象一个数据对象：一个抽屉 drawer，里面有10个盒子，

        · a = drawer，相当于给这个抽屉贴了标签 a，每个盒子贴了标签 a[0]、a[1] …… a[9]

        · 浅拷贝：b = a.copy()，相当于给这10个盒子又贴了标签 b[0]、b[1] …… b[9]

        · 于是，对 a[1]、a[2] …… a[9] 的操作完全等价于对 b[0]、b[1] …… b[9]的操作

        · 但如果在 a 标签的抽屉里增加一个盒子 a[10]，对标签为 b 的抽屉不起作用

        · ★ 慎用浅拷贝
"""

# 例：
a = [10, 100, ['a', 'b']]
b = a.copy()
a.append(5)       # 相当于在标签为 a 的抽屉里增加了一个盒子，对标签为 b 的抽屉不起作用
a[2].append(1000) # a[2]盒子里又放了一个 1000，对 b[2] 起作用

print(a)  # >>> [10, 100, ['a', 'b', 1000], 5]
print(b)  # >>> [10, 100, ['a', 'b', 1000]]