""" 1. 赋值

      · 在 Python 中给一个变量赋值，例如 p = 5，
        相当于在内存某个位置存放了数据对象 5， 然后用变量名 p 指向这个内存位置，
        这个过程也被称为引用    

      · 进一步，当写 q = p 时，相当于用变量名 q 指向 p 所指的内存位置；
        也就是说，变量名 p 和 q 指向的内存位置相同，
        操作 p 等价于操作 q
"""

# 例 1：
p = [1, 2, 3, ['a', 'b']]
q = p
p.append(True)   # 对 p 操作
p[3].append('c') # 对 p 操作

print(p, id(p))  # >>> [1, 2, 3, ['a', 'b', 'c'], True]
print(q, id(q))  # >>> [1, 2, 3, ['a', 'b', 'c'], True]
print(id(p) == id(q))  # >>> True  说明 p 和 q 内存位置(id)相同

# 例 2：
alist = [1, 2, 3]
new_list = 2 * [alist]  # new_list 指向 alist 所指的内存位置
print(new_list)  # >>> [[1, 2, 3], [1, 2, 3]]
alist.append(4)  # 对 alist 进行操作，new_list也会相应变化 
print(new_list)  # >>> [[1, 2, 3, 4], [1, 2, 3, 4]]


"""  2. 深拷贝（需引入模块 copy）
        
        · p = 5，相当于在内存某个位置存放了数据对象 5，并用变量名 p 指向这个位置
        
        · 深拷贝：q = copy.deepcopy(p)，
		  相当于产生1个新内存位置，拷贝数据对象5到这个新位置，并被 q 所指向
        
        · 换言之，p 和 q 指向两个内存位置，p 和 q 完全独立
"""

# 例：
import copy
p = [1, 2, 3, ['a', 'b']]
q = copy.deepcopy(p)
p.append(100)    # 对 p 操作 
q[3].append('c') # 对 q 操作

print(p)  # >>> [1, 2, 3, ['a', 'b'], 100]，
print(q)  # >>> [1, 2, 3, ['a', 'b', 'c']]

print(id(p) == id(q))  # >>> False  说明 p 和 q 指向的内存位置(id)不同


""" 3. 浅拷贝 
        
        · p = [1, 2, 3, ['a', 'b']]，
          相当于在某个内存位置存放了数据对象 [1, 2, 3, ['a', 'b']]，并用变量名 p 指向这个位置
          
        · 其中的元素 1、2、3、['a', 'b'] 也各自占据一个内存位置，依次被变量名 p[0]~p[3] 所指向

        · 浅拷贝：q = p.copy()，相当于产生1个新内存位置，并用变量名 q 指向这个位置
          但 q 位置所拷贝的是 p[0]~p[3] 指向的内存位置
          
        · 简言之，p 和 q 指向的内存位置不同，但 p[0]~p[3] 和 q[0]~q[3] 指向的内存位置相同
"""

# 例：
p = [1, 2, 3, ['a', 'b']]
q = p.copy()
p.append(True)       # p 和 q 指向的内存位置不同，操作 p 不影响 q
q[3].append('c')     # p[3] 和 q[3] 指向的内存位置相同，操作 p[3] 等价于操作 q[3] 

print(p)  # >>> [1, 2, 3, ['a', 'b', 'c'], True]
print(q)  # >>> [1, 2, 3, ['a', 'b', 'c']]

print(id(p) == id(q))        # >>> False  说明 p 和 q 指向的内存位置(id)不同
print(id(p[3]) == id(q[3]))  # >>> True   说明 p[3] 和 q[3] 指向的内存位置(id)相同