""" 1. 什么是算法？ 算法是对问题解决的分步描述，程序则是采用某种编程语言实现的算法。

    2. 什么是算法分析？ 算法分析可衡量算法的复杂度，复杂度低的算法可以更高效地利用计算资源。

    3. 什么占用了计算资源？  
    计算机程序包括：控制流语句、赋值语句。
    控制流语句仅仅起到组织作用，真正占用计算资源的语句是赋值语句。
    一条赋值语句同时包含了（表达式）计算和（变重）存储两个基本资源。

    4. 什么是大O分析法？
    通过确定算法中赋值语句的数量级来分析算法的复杂度。
    确定算法中赋值语句数量级的方法见下例：
    
    def fn(n):
        a = 2  # 1个赋值语句
        b = 4  # 1个赋值语句
        c = 6  # 1个赋值语句
        for i in range(n):  # n个赋值语句
            for j in range(n):  # n个赋值语句
                x = a * b  # 1个赋值语句
                y = a * c  # 1个赋值语句
                z = b * c  # 1个赋值语句
            for k in range(n):  # n个赋值语句
                p = a + k  # 1个赋值语句
                q = b + c  # 1个赋值语句
        out = x + y + z + p + q  # 1个赋值语句
        return out
        
    其中，赋值语句总数 = 3 + 3n^2 + 2n + 1 = 3n^2 + 2n + 4，
    随着计算规模 n 增大，该算法赋值语句总数中增长最快的项为 n^2 项，
    因此该算法的数量级为 大O(n^2)，也称为“平方时间复杂度”。
    
    常用的大O数量级函数有8个，复杂度：O(1) < O(log(n)) < O(n) < O(nlog(n)) < O(n^2) < O(n^3) < O(2^n) < O(n!)
"""   

""" O(1):常数复杂度示例 """
def fn_sum(n):
    ''' 该函数计算1 ~ n的和 '''
    out = n * (n + 1) / 2  # 1个赋值语句
    return out

""" O(n):线性复杂度示例 """ 
def fn_sum(n):
    ''' 该函数计算1 ~ n的和 '''
    out = 0  # 1个赋值语句
    for i in range(1, n+1): # n个赋值语句
        out = out + 1  # 1个赋值语句
    return out

""" O(2^n):指数型复杂度示例 """
def fibonacci(n):
    ''' 该函数计算Fibonacci数列前n项和 '''
    if n <= 1:
        return n
    else:
        out = fibonacci(n-2) + fibonacci(n-1) # 赋值语句个数：f(n+2) 是 f(n)的两倍以上
        return out

""" O(n!):阶乘型复杂度示例 
    
    问题：比较两个字符串s1和s2包含的字母是否相同
    
    暴力解法：将s1（假设有n个字母）中所有字母进行全排列，可得 n! 个组合，检查s2是否在 n! 个组合中
    
    这种揭发的复杂度为大O(n!)
"""