""" 生成器(generator)：
    · 创建一个列表/元组或计算一个涉及迭代的函数结果时，
      计算机会在内存中存储整个计算结果，如果数据量很大，非常占用内存
    
    · 生成器可以一边迭代，一边计算结果
      比如一个列表生成器，一边迭代至下一元素，一边计算下一元素的值
      如此一来，就解决了内存占用问题
"""


""" 1. 列表生成器 """
a = (x**2 for x in range(10)) # 把列表生成式的[]改成()创建generator
# a. 用next提取生成器中的元素
print(next(a))  # >>> 0
print(next(a))  # >>> 1
print(next(a))  # >>> 4
# b. 循环提取生成器中的元素
for n in a:
    print(n)
    

    
""" 2. 函数生成器 
      
    · 函数生成器的定义与普通函数相同，只是将return/print换成了yield，区别在于：
      
      调用普通函数，执行 return 语句后，会立即终止函数；
      假如再次调用函数，程序又从函数第一句执行到最后一句。
      
      调用生成器，执行 yield 语句后，生成器被 "挂起" ，
      假如再次调用生成器，直接从 yield 之后的语句开始执行
"""
def even_num(num_max):  # 定义一个产生偶数的生成器
    m = 0
    while m < num_max:
        yield m  # 生成数字
        m += 2
        
for i in even_num(10):  # 调用生成器
    print(i)
