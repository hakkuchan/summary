模块的选择型运行 (if __name__ == '__main__': 的作用)

Python 是解释型语言，从脚本第一行开始运行。
从顶层导入一个模块（本质上，一个 .py 文件）时，程序会从顶层模块代码直接运行。
比如，有一个模块 hello_world.py，其内容为：print('Hello world !')

import hello_world
会直接输出：Hello world ！
 
显然，我们只希望引入 hello_world 模块，不希望运行其中的代码
因此，把 hello_world.py 改写为：

if __name__ == '__main__':
    print('Hello world !')

此时就只引入模块，而不运行模块中 if __name__ == '__main__': 后面的代码

理解如下：__name__ 是当前文件的内置变量，存储着当前模块（.py 文件）的名字

当模块被运行时，当前模块名是 __main__，因此 __name__=='__main__' is True，于是执行之后的代码，

当模块（比如 hello_world.py）被引入时，模块名是 hello_world. 因此 __name__=='__main__' is False，便不执行之后的代码。

综上，if __name__ == '__main__': 的作用判断当前模块是在被运行还是被引入，进而选择性执行之后的代码