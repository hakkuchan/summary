1. 模块（module)：
   一个包含Python代码的.py文件（包含了函数、特殊值等），比如math模块
   import math >>> type(math) >>> module
   查看module中定义的所有功能：dir(modulename)，比如 dir(math)
	
    （1） 导入module的方法，以math为例：
        
        直接导入：
        import math
        import math as m
        
        导入模块中的某个函数或值
        from math import pi, log 或 from math import log as ln
		
        只能一句一句import，不能像这样：from math import log, log10 as ln, lg
        也不能像这样导入： import math.log as ln （import A.B 的语法不适用于module，只适用于package）

        导入模块内定义的所有内容
        from math import *
        不要使用这个功能，因为它在解释器中引入了一组module内的名称，它们很可能会覆盖一些你已经定义过的东西

    （2）导入自定义module（比如 my_module.py）
		
		方法1：查看现有包（如pandas）所在路径，将my_module.py存入该路径
		import pandas
        print(pandas.__file__)
		
        方法2：假如 my_module.py 的保存路径为 E:/Work，先添加其位置：
        import sys
        sys.path.append('E:/Work/')

        之后便可 import my_module


2. 包（package）：
    package是一个包含了多个module或子包(内含module和子包)的文件夹，比如sklearn
    
    （1）导入方式
        直接导入 import sklearn
        导入内部模块或子包 import sklearn.preprocessing (可以连续，如A.B.C)
        也可以 import sklearn.preprocessing as preproecss
        也可以 from sklearn import preprocessing as preprocess
        from sklearn import * 不推荐，耗时且可能有副作用
    
    （2）package中必然包含__init__.py 文件
        其作用是将普通文件夹变为一个package，在导入一个包时，实际上是导入了它的__init__.py文件,
        这样我们可以在__init__.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入
        
        __init__.py 一般是一个空文件，也可定义一个列表 __all__
        若定义了列表 __all__，from package import * 时，就会导入package的所有列表名（显式）。如果没有这个定义，就只导入package。
            举例：
                from sklearn import *
                如果sklearn中的__init__.py文件含有__all__列表，那么就可以直接用其中的module，比如preprocessing。
                    a = preprocessing.MinMaxScaler......
                反之，如果sklearn中的__init__.py文件没有__all__列表（实际上有），那么 from sklearn import * 后，依然不能直接使用其中的module