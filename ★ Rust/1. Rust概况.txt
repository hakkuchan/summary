Rust语言是一种同时追求安全、并发和性能的现代系统级编程语言。

该语言所解决的问题是：1）内存安全；2）线程安全。

内存安全是指：程序不会访问未定义的内存。

线程安全是指：指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。

Rust建立了严格的安全内存管理模型：
    1）所有权系统：每个被分配的内存都有一个独占其所有权的指针，必须先销毁，再释放。
    2）生命周期：每个变量有生命周期，超出生命周期会被自动释放。
	3）借用：防止出现释放后使用。

由于，内存不安全和线程不安全均是由内存的不正当访问导致的。因此Rust的安全内存管理模型（类型系统的一部分）可以保证内存安全和线程安全。

Rust语言风格接近自然语言，具有强开发性能，同时利用泛型和trait确保性能不会受到影响（不像python需要先解释、再执行）。